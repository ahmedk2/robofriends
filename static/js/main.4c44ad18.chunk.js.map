{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","user","index","key","Scroll","props","style","overflowY","height","children","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCUSC,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OAEI,yBAAKC,UAAW,uDACd,6BACE,yBAAKC,IAAM,UAASC,IAAG,+BAA0BL,MAEnD,4BAAKC,GACL,2BAAIC,MC0BCI,EAxCE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAWX,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAWd,OACI,kBAAC,EAAD,CACAC,IAAMD,EACNV,GAAIO,EAAOG,GAAOV,GAClBC,KAAOM,EAAOG,GAAOT,KACrBC,MAASK,EAAOG,GAAOR,aCdhCU,EAnBA,SAACC,GAOZ,OAEI,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,UAE3CH,EAAMI,SAFP,MCDOC,EATG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKjB,UAAU,OACX,2BAAOkB,KAAK,SAASlB,UAAU,mCAC/BmB,YAAY,gBAAgBC,SAAUH,MC2EnCI,G,kBA9DX,aAAe,IAAD,8BACV,+CAoBJC,eAAiB,SAACC,GAId,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SArBzC,EAAKC,MAAQ,CACTvB,OAAQ,GACRY,YAAa,IANP,E,iFAWO,IAAD,OAEhBY,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACpB,OAAQ4B,S,+BAehC,IAAD,OAECC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAAC,GAK5C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS,EAAKX,MAAMX,YAAYqB,kBAIpE,OAAgC,IAA5BH,KAAKP,MAAMvB,OAAOmC,OACX,uCAOR,yBAAKvC,UAAU,MACV,wBAAIA,UAAW,eAAf,eACA,kBAAC,EAAD,CAAWiB,aAAciB,KAAKZ,iBAC9B,kBAAC,EAAD,KAEA,kBAAC,EAAD,CAAUlB,OAAQ6B,U,GAvDhBO,IAAMC,Y,MCLxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SNqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.4c44ad18.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//we need to impot react to use JSX (HTML+JS)\nimport React from 'react';\n\n\n//here we are destructuring i.e. extracting multiple values from data stored in \n//(possibly nested) objects and Arrays\n//in this case we are destructuing the values id name and email from\n//the array robots in the file robot.js\n\n//this component is pure because it receives an input and always gives the same output\n//there are no side effects or anything. Similarly some people call pure \n//pure components dumb components because its unaware of things outside\n//it just recieves something and return something thats it\nconst Card = ({id, name, email}) => {\n    return(\n        //This is JSX Code \n        <div className= \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n          <div>\n            <img alt = \"robots \"src={`https://robohash.org/${id}`} />\n         </div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n    ); \n    \n    \n}\n\nexport default Card;\n\n","import React from 'react'\nimport Card from './Card'\n\n//here we created a new component with robots as the prop\n//we were able destructre robots and use it as prop because\n//CardList is a child of Card and data carries downard from parent to child\n//we are destructuring robots because we want to access this arrays values\nconst CardList = ({robots}) => {\n        //we are creating a new array to store the values of the mapped \n        //robots array from robots.js\n        //remember with map we have 2 brackets to store all looped code \n        //and curly brace for more than one line\n        //also the param user is used to loop through each element of the array and return array\n        //the param index is used to go through each element\n    \n        //here we are returning the CardArray so that we can have cleaner code\n        //also we need to use curly braces since the CardArray is javascript and \n        //we need to access its values with destructuring\n        return(\n            <div>\n            { //curly braces are red to show everything insde is JS\n                robots.map((user, index) => {\n    \n                //every child in an array/iterator should have a unique key\n                /*\n                It is important that keys have a “stable identity” across re-renders so that React \n                can determine when items are added, removed, or re-ordered. Ideally, keys should \n                correspond to unique and stable identifiers coming from your data, such as post.id.\n                */\n                //whenever you loop always give a unique key\n                //user {} because its javascript everything inside the comopent\n                //is considered JSX so to seperate Javascript we need to use {}\n                    return (\n                        <Card \n                        key ={index} \n                        id={robots[index].id} \n                        name ={robots[index].name} \n                        email = {robots[index].email}/>\n                    );\n            \n                })\n            }\n            </div>\n        );\n}\n\n//remember we need to export this file so it can be imported elsewhere\nexport default CardList;","import React from 'react'\n\n//component that can replace content of cardList\n//everything inside the scroll component in App.js is a child\nconst Scroll = (props) => {\n   \n    /*use double curly brace for css \n   overflowY is for scrolling\n   the height property is used to specify the\n   height of the scroll component and make sure it is a large size\n   because it needs to wrap the entire cardlist component */\n    return (\n        \n        <div style = {{overflowY: 'scroll', height: '500px'}}>\n        \n        {props.children} {/*we use this to wrap components around\n                          //other components \n                          remember to use curly braces for JS in JSX code*/}\n        </div>\n    )\n}\n\n//exporting component so its accessible outside file\nexport default Scroll;","import React from 'react';\n\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return(\n        <div className=\"pa2\">\n            <input type=\"search\" className=\"pa3 ba b--green bg-lightest-blue\" \n            placeholder=\"search robots\" onChange={searchChange}/>\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n//we need to import these two classes so we can access their\n//components and other data\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll'\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n\n//if you refer to the picture that shows the downard flow of data within react you \n//may notice that neighbour or child data cannot comunicate with each other directly\n//that is why you need a state (description of your app i.e. object)\n//the state in our case is the robot and what is entered in the search box\n//your state would change based on what is typed in search bar\n\n//props are things that come out of state\n//a parent feeds state into child component and as soon as child receives\n//the state a child cannot change the state\n\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        //state describes our app and lives in parent component\n        //we have two states\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n\n    //updates the state of robot\n    componentDidMount() {\n        //going to fetch the users from a website that has json text\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json()) //we need to convert the response from the users in the website into json objec\n        .then(users => this.setState({robots: users})); //we are retrieving the users from the json and \n                                                        //updating the state of robots with setState\n                                                        //without this you wont recieve robots\n    }\n    //a function that checks for changes in search value \n    //also onSearchChange is a prop passed down to searchbox\n    onSearchChange = (event) => {\n        \n        //any time you want to change the state always run this\n        //very important rule of React\n        this.setState({searchField: event.target.value})  //the value of event\n        \n      \n    }\n\n    render() {\n        //putting this here to have filteredRobots accessible\n        const filteredRobots = this.state.robots.filter(robot => {\n            //filters the robots state to only have what includes in \n            //the search field \n            //tolowercase is used to ensure values typed in search field are \n            //are converted to lowercase to make it easy upper/lower case conversion\n            return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n        })\n        \n        //if we had too mny users and page took to ong\n        if (this.state.robots.length ===0) {\n            return <h1>Loading</h1>\n        }\n        return(\n            //we created a component within the App component\n            //were the CardList stores the card component and\n            //robots holds the array of values and we are able to access\n            //the values in the array because we are destructuring with {}\n           <div className=\"tc\">\n                <h1 className= 'f1 tc grow '>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                {/* we are passing the filtered robots in the card list */}\n                <CardList robots={filteredRobots} />\n                </Scroll>\n           </div>\n        )\n    }\n    \n}\n\nexport default App;","import React from 'react';\n//for react for the web (dom)\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n//for progressive web apps\nimport * as serviceWorker from './serviceWorker';\n//import component from Major Parent \nimport App from './containers/App';\n//for react css similar to bootstrap\nimport 'tachyons';\n\n//remember the name of components are always capitalized\n//import major component from App.js\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}